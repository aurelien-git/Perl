#!/usr/bin/perl
# Perl - Stack of Perl Exp
# License    : GNU GPL v3 or later
# Author     : Aurélien DESBRIERES
# Mail       : aurelien@hackers.camp
# Project    : Programming Deeper in Perl
# Created on : Wednesday December 13 2017

# Write with Emacs-Nox ──────────────────────────┐
# Perl - x0001.pl ───────────────────────────────┘

# using perl -c <file> to check the code
# perl -d:Trace <file> <options> to check the code execution

# How to improve security level in perl? like the C compiler
# time gcc -std=c11 -fstack-protector-strong -Wpedantic -pedantic-errors -Wall -g -O3 -Os -Og -o a a.c

# from https://docstore.mik.ua/orelly/perl/advprog/ch02_04.htm
# advanced programming perl


my(%profs);                             # prof_read_files() populates this data structure from file

sub
  prof_read_file
  {
      my ($filename) = @_;
      my ($line, $curr_prof);
      open (F, $filename) || die "Could not open $filename";
      while ($line = <F>) {
          chomp($line);
          next if $line =~ /^\s*$/;           # skip blank lines
          if ($line =~ /^id.*:\s*(.*)/) {
              # Use an anonymous hash to store a professor's data
              $profs{$1} = $curr_prof = {};
          } elsif ($line =~ /^Office Hours.*:\s*(.*)/) {
              # $1 contains a string like 'Mon 2-3, Tue 4-6'
              $curr_prof->{Office Hours} = interval_parse($1);
          } elsif ($line =~ /^Courses.*:\s*(.*)/) {
              # $1 contains something like 'HS201, MA101'
              my (@courses_taught) = split(/[\s,]+/, $1);
              $curr_prof->{Courses} = \@courses_taught;
          }
      }
  }

  my %base_hours = (
                    mon => 0, tue => 12, wed => 24, thu => 36, fri => 48
                   );
  sub
    interval_parse
    {
        my ($interval_sequense) = @_;   # contains "Mon 3-5, Tue 2-6"
        my ($time_range) = "";
        foreach $day_hours (split /,/, $interval_sequense) {
            # $day_hours contains "Mon 3-5" etc.
            my ($day, $from, $to) =
              ($day_hours =~ /([A-Za-z]+).*(\d+)-(\d+)/);
            # if $from or $to is less than 7, it must be afternoon. Normalize
            # it by adding 12. Then reduce it to a zero base by subtracting 7
            # (that is, 7 hrs to 19 hrs becomes 0 - 12. Finally,
            # normalize each hour in a day with respect to weekly hours,
            # by adding in the day's "base hour"
            $to = 19 if $to == 7;
            $from += 12 if $from < 7 ; $to += 12 if $to <= 7;
            my $base = $base_hours{lc $day};
            $from += $base - 7; $to += $base - 7;
            # At this point Tue 7a.m ==> 12 and Tue 4 p.m => 21
            for ($i = $from; $i < $to; $i++) {
                # Set the corresponding bit
                vec($time_range, $i, 1) = 1;
            }
        }
        $time_range;
    }


    # Overlapping hours
    sub prof_check_constraints {
        my ($prof) = @_;
        my $r_prof = $profs{$prof};     # %profs created by profs_read_file
        my $office_hours = $r_prof->{office Hours};
        my $rl_courses =
$r_prof->{Courses}
;
        for $i (0 .. $#{$rl_courses}) {
            $course_hours = course_get_hours($rl_courses->[$i]);
            if (interval_conflicts($office_hours, $course_hours)) {
                print "Prof. ", $r_prof->{name},
                  " Office hours conflict with course $course_taught\n";
            }
            for $j ($i .. $#{$rl_courses}) {
                my ($other_course_hours) = course_get_hours($rl_courses->[$j]);
                if (interval_conflicts ($course_hours, $other_course_hours)) {
                    print "Prof. ", $r_prof->{name},
                      ": Course conflict: ", $rl_courses->[$i], " ";
                                             $rl_courses->[$j], "\n";
                }
            }
        }

        sub interval_conflicts {
            my ($t1, $t2) = @_;
            my ($combined) = $t1 & $t2;
            # $combined will have at least one bit set if there's a conflict
            my $offset = length($combined) * 8;
            # start counting down from last bit, and see if any is set
            while (--$offset >= 0) {
                return 1 if vec($combined,$offset,1);
            }
            return 0;
        }
    }


# 2.4 Pass the envelope
open (F, "oscar.txt") || die "Could not open database: $:";
%category_index = (); %year_index = ();
while ($line = <F>) {
    chomp $line;
    ($year, $category, $name) = split (/:/, $line);
    create_entry($year, $category, $name) if $name;
}

sub create_entry {                      # create_entry (year, category, name)
    my($year, $category, $name) = @_;
    # Create an anonymous array for each entry
    $rlEntry = [$year, $category, $name];
    # Add this to the two indices
    push (@{$year_index {$year}}, $rlEntry);           # By Year
    push (@{$category_index{$category}}, $rlEntry);    # By Category
}

# 2.4.2 Print all entries for a given year
sub print_entries_for_year {
    my($year) = @_;
    print ("Year : $year \n");
    foreach $rlEntry (@{$year_index{$year}}) {
        print ("\t",$rlEntry->[1], " : ",$rlEntry->[2], "\n");
    }
}

# 2.4.3 Print all entries sorted by year
  sub print_all_entries_for_year {
      foreach $year (sort keys %year_index) {
          if ($rlEntry->[1] eq $category) {
              print "$category ($year), ", $rlEntry->[2], "\n";
              return;
          }
      }
      print "No entry for $category ($year) \n";
  }

# 2.4.4 Print a Specific Entry, Given a Year and Category
    sub print_entry {
        my($year, $category) = @_;
        foreach $rlEntry (@{$year_index{$year}}) {
            if ($rlEntry->[1] eq $category) {
                print "$category ($year), ", $rlEntry->[2], "\n";
            }
        }
        print "No entry for $category ($year) \n";
    }

      # 2.5 Pretty-Printing
      $level = -1;                      # Level of indentation
    sub pretty_print {
        my $var;
        foreach $var (@_) {
            if (ref ($var)) {
                print_ref($var);
            } else {
                print_scalar($var);
            }
        }
    }

    sub print_scalar {
        ++$level;
        my $var = shift;
        print_indented ($var);
        --$level;
    }
      sub print_ref {
          my $r = shift;
          if (exists ($already_seen{$r})) {
              print_indented ("$r (Seen earlier)");
              return;
          } else {
              $already_seen{$r}=1;
          }
          my $ref_type = ref($r);
          if ($ref_type eq "ARRAY") {
              print_array($r);
          } elsif ($ref_type eq "SCALAR") {
              print "Ref -> $r";
              print_scalar($$r);
          } elsif ($ref_type eq "HASH") {
              print_hash($r);
          } elsif ($ref_type eq "REF") {
              ++$level;
              print_indented("Ref -> ($r)");
              print_ref($$r);
              --$level;
          } else {
              print_indented ("$ref_type (not supported)");
          }
      }

        sub print_array {
            my ($r_array) = @_;
            ++$level;
            print_indented ("[ # $r_array");
            foreach $var (@$r_array) {
                if (ref ($var)) {
                    print_ref($var);
                } else {
                    print_scalar($var);
                }
            }
            print_indented ("]");
            --$level;
        }
          sub print_hash {
              my($r_hash) = @_;
              my($key, $val);
              ++$level;
              print_indented ("{ # $r_hash");
              while (($key, $val) = each %$r_hash) {
                  $val = ($val ? $val : '""');
                  ++$level;
                  if (ref ($val)) {
                      print_indented ("$key = ");
                      print_ref($val);
                  } else {
                      print_indented ("$key = $val");
                  }
                  --$level;
              }
              print_indented ("}");
              --$level;
          }
            sub print_indented {
                $spaces = ": " x $level;
                print "${spaces}$_[0]\n";
            }

              $a = 20;                            # global variable
            {
                local ($a);                       # save $a's old value;
                # new value is undef
                my (@b);                          # Lexical variable
                $a = 10;                          # Modify $a's new value
                @b = ("wallace", "grommit");
                print $a;                         # prints "10"
                print "@b";                       # prints "wallace grommit"
            }

            # Block ended. Back to global scope wher only $a is valid
            print $a;                             # prints "20", the old value
            print @b;                             # prints a warning, because no global @b

            $x = 10;
            first();

            sub first {
                local ($x) = "zen";               # $x is still global, and has a new value
                second();
            }
            sub second {
                print $x;                         # Prints "zen", the current value of the global $x
            }

            local $x{foo};                        # Squirrel away $x{foo}'s value.

#            my $x{foo};                           # Error. $x{foo} is not a variable

            # 3.1.2.1 When would you ever need to use local?
            { # Start of a new block
                local(@ARGV) = ("/home/aurelien", "/home/aurelien/git/area51/Perl/oscar.txt");
                while (<>) {
                    # Iterate through each file and process each line
                    print;                        # print, for example
                }
            } # Block ends. The original @ARGV restored after this.

            {
                local $/ = undef;                 # Saves previous value of $/, and substitutes
                # it with undef
                $a = <STDIN>;                     # Slurp all of STDIN into $a
            }

            # 3.2 Typeglobs
            $spud = "wow!";
            @spud = ("idao", "russet");

            *potato
              =
              *spud;
            # Alias potato to spud using typeglob assignment
            print "$potato\n";                    # print "Wow!"
            print @potato, "\n",                  # prints "idaho russet"
